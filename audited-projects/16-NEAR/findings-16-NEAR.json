{
  "audited_project_id": 16,
  "project_name": "NEAR",
  "auditor": "Hacken",
  "audit_link": "https://audits.hacken.io/near/l1-near-nearcore-oct2023/",
  "findings": [
    {
      "title": "Inconsistent TrieKey Implementation",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "core/primitives/src/trie_key.rs",
          "lines": [112, 162, 648, 448]
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Code Quality",
      "description": "F-2023-1641 - Inconsistent TrieKey Implementation - Low\nDescription:\nWithin the TrieKey implementation, the structs and their methods for different records such as Account, ContractCode, AccessKey, ReceivedData, etc., are defined.\n\nFor records containing multiple values (e.g., ReceivedData contains receiver_id and data_id), the values are packed as such:\n\nTrieKey::PendingDataCount { receiver_id, receipt_id } => {\n    buf.push(col::PENDING_DATA_COUNT); // Column name\n    buf.extend(receiver_id.as_ref().as_bytes()); // First data element\n    buf.push(ACCOUNT_DATA_SEPARATOR); // Data separator\n    buf.extend(receipt_id.as_ref()); // Second data element\n}\n\nHowever, there is an inconsistency for the AccessKey record, possibly due to a mistake. The column name identifier is used instead of the ACCOUNT_DATA_SEPARATOR constant. This bug is propagated in further usage.\n\n[Here](https://github.com/hknio/nearcore/blob/audit/core/primitives/src/trie_key.rs#L112):\nTrieKey::AccessKey { account_id, public_key } => {\n    col::ACCESS_KEY.len() * 2 + account_id.len() + public_key.len()\n}\n\nAnd [here](https://github.com/hknio/nearcore/blob/audit/core/primitives/src/trie_key.rs#L162):\nTrieKey::AccessKey { account_id, public_key } => {\n    buf.push(col::ACCESS_KEY);\n    buf.extend(account_id.as_ref().as_bytes());\n    buf.push(col::ACCESS_KEY);\n    buf.extend(public_key.try_to_vec().unwrap());\n}\n\nDue to validation elsewhere in the code and the fact that the ACCOUNT_DATA_SEPARATOR is the same length as the col::ACCESS_KEY, as well as the fact that code was written around this bug (adding the next_element function which takes the separator as a parameter to handle the edge case), this does not cause problems or crashes.\n\nHowever, in order to maintain a high code quality, this issue must be fixed.\n\nFurther down the code, there is another inconsistency within the inner tests module. The [test_account_id_from_trie_key](https://github.com/hknio/nearcore/blob/audit/core/primitives/src/trie_key.rs#L648) runs only against the first item in [OK_ACCOUNT_IDS](https://github.com/hknio/nearcore/blob/audit/core/primitives/src/trie_key.rs#L448):\n\nfn test_account_id_from_trie_key() {\n    let account_id = OK_ACCOUNT_IDS[0].parse::().unwrap();\n    // ...\n}\n\nStatus:\nFixed\n\nClassification\nSeverity:\nLow\n\nRecommendations\nRemediation:\nTo address the issue in the TrieKey implementation, the following actions are recommended:\n\n1. Fix AccessKey Record: Correct the usage of the ACCOUNT_DATA_SEPARATOR in the AccessKey record by replacing it with the appropriate column name identifier (col::ACCESS_KEY).\n2. Code Refactoring: Review and refactor the code that relies on the incorrect usage of the ACCOUNT_DATA_SEPARATOR to ensure consistency and improve code quality.\n3. Comprehensive Testing: Enhance the tests in the TrieKey implementation. Specifically, modify the test_account_id_from_trie_key function to iterate through the entire array of account IDs, similar to other tests. This ensures comprehensive coverage and accurate validation.",
      "description_summary": "Inconsistent usage of ACCOUNT_DATA_SEPARATOR in TrieKey implementation affecting AccessKey records, requiring fixes for code quality and consistency."
    },
    {
      "title": "Address Vulnerable, Outdated, and Unmaintained Dependencies",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "Cargo.toml",
          "lines": null
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Dependency",
      "description": "F-2023-1643 - Address Vulnerable, Outdated, and Unmaintained Dependencies - Low\nDescription:\nA cargo audit has revealed multiple dependencies that are vulnerable, unmaintained, or outdated. Below is a detailed list:\n\nVulnerable Dependencies:\n-Crate: ed25519-dalek (Version: 1.0.1).\nRUSTSEC-2022-0093: Vulnerable to double public key signing function oracle attack. Upgrade to version >=2.0.\n-Crate: h2 (Version: 0.3.13).\nRUSTSEC-2023-0034: Resource exhaustion vulnerability may lead to Denial of Service (DoS). Upgrade to version >=0.3.17.\n-Crate: libsqlite3-sys (Version: 0.24.2).\nRUSTSEC-2022-0090: Vulnerable to CVE-2022-35737. Upgrade to version >=0.25.1.\n-Crate: openssl (Version: 0.10.48).\nRUSTSEC-2023-0044: Buffer over-read vulnerability in X509VerifyParamRef::set_host. Upgrade to version >=0.10.55.\n-Crate: remove_dir_all (Version: 0.5.3).\nRUSTSEC-2023-0018: Race condition enabling link following and TOCTOU. Upgrade to version >=0.8.0.\n-Crate: time (Version: 0.1.44).\nRUSTSEC-2020-0071: Potential segfault. Upgrade to version >=0.2.23.\n\nUnmaintained Dependencies:\n-Crate: ansi_term (Version: 0.12.1).\nRUSTSEC-2021-0139: The crate is unmaintained.\n-Crate: mach (Version: 0.3.2).\nRUSTSEC-2020-0168: The crate is unmaintained.\n-Crate: memmap (Version: 0.7.0).\nRUSTSEC-2020-0077: The crate is unmaintained.\n-Crate: parity-wasm (Versions: 0.41.0 and 0.42.2).\nRUSTSEC-2022-0061: The crate is deprecated and unmaintained.\n-Crate: serde_cbor (Version: 0.11.2).\nRUSTSEC-2021-0127: The crate is unmaintained.\n\nDeprecated or Yanked Dependencies:\n-Crate: cpufeatures (Version: 0.2.2).\nYanked from crates.io.\n-Crate: crossbeam-channel (Version: 0.5.4).\nYanked from crates.io.\n-Crate: ed25519 (Version: 1.5.1).\nYanked from crates.io.\n-Crate: hermit-abi (Version: 0.3.1).\nYanked from crates.io.\n\nStatus:\nFixed\n\nClassification\nSeverity:\nLow\n\nRecommendations\nRemediation:\n1. Upgrade Dependencies: Act promptly to upgrade the listed dependencies to their recommended versions or to viable alternatives to mitigate any associated risks.\n2. Dependency Maintenance Strategy: Develop and adhere to a maintenance strategy for dependencies to ensure the project utilizes well-supported and secure libraries.\n\nAddressing these issues proactively will fortify the project's security posture and facilitate smoother, risk-mitigated development going forward.",
      "description_summary": "Multiple dependencies are vulnerable, outdated, unmaintained, or deprecated, requiring upgrades and a maintenance strategy."
    },
    {
      "title": "Singlepass Compiler Vulnerability: Absence of wasm Feature Validation",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "runtime/near-vm/compiler-singlepass",
          "lines": null
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Error Handling and Validation",
      "description": "F-2023-1640 - Singlepass Compiler Vulnerability: Absence of wasm Feature Validation - Low\nDescription:\nThe near-vm-compiler-singlepass serves as one of the primary compilers for NearVM. However, a notable gap in its architecture is the lack of wasm feature validation prior to the actual compilation.\nThe Singlepass compiler currently does not conduct a thorough validation of wasm features before initiating the compilation. This issue is further compounded by the presence of todo! macros within the ArgumentRegisterAllocator implementation, as seen here. Consequently, the following snippet of Rust code can disrupt the compilation process:\n// both funcref and externref are falling under todo! macro case\nlet wasm_bytes = wat2wasm(r#\"\\n(module\\n(type $t0 (func (param funcref externref)))\\n(import \\\"\\\" \\\"\\\" (func $hello (type $t0)))\\n)\\n\"#.as_bytes(),\n)?;\nlet compiler = Singlepass::default();\nlet mut store = Store::new(compiler);\nlet module = Module::new(&store, wasm_bytes)?;\nThis could have been a critical issue. However, a separate validation mechanism within near_vm_runner prevents unsupported features from reaching the compilation stage. This validation mitigates the risk, but the underlying problem remains unresolved.\nStatus:\nFixed\nClassification\nSeverity:\nLow\nRecommendations\nRemediation: To enhance the robustness and reliability of the Singlepass compiler, it is strongly recommended to replace the use of todo! macros with proper error handling mechanisms. This improvement will not only address the current problem but will also contribute to the overall stability of the compiler, particularly when dealing with unsupported wasm features.\nResolution: Addressed in https://github.com/near/nearcore/issues/10141",
      "description_summary": "The Singlepass compiler lacks wasm feature validation, allowing unsupported features to disrupt the compilation process."
    },
    {
      "title": "Address Broken Links Throughout Codebase",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "docs/architecture/README.md",
          "lines": null
        },
        {
          "file_path": "docs/architecture/how/README.md",
          "lines": null
        },
        {
          "file_path": "runtime/near-vm/api/README.md",
          "lines": null
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Code Quality",
      "description": "F-2023-1642 - Address Broken Links Throughout Codebase - Low\nDescription:\nMultiple broken URLs have been identified within the project's codebase, documentation, and README files. These need to be reviewed and corrected to maintain the integrity and accuracy of the project documentation.\nAn analysis using lychee unveiled broken URLs in 22 locations, detailed below:\n_./docs/architecture/README.md_:\nFile not found: _/workspaces/nearcore/docs/architecture/style.md_ .\n_./docs/architecture/how/README.md_:\n404 Error: Nearcore Sync Code Reference.\n. _/docs/architecture/how/epoch.md_:\nDNS Error for _http://go/mainnet-genesis_ .\n_./docs/architecture/gas/estimator.md_ :\n404 Error: QEMU Documentation\n_./docs/architecture/network.md_ :\n404 Error: Peer Manager Code Reference.\n404 Error: Actix Documentation.\n_./docs/practices/when_to_use_private_repository.md_\n&\n_./docs/practices/security_vulnerabilities.md_ :\n404 Error: https://github.com/near/nearcore-private.\n_./docs/practices/testing/README.md_ :\nMultiple 404 Errors, DNS error: Detailed list of broken URLs needs review.\n./docs/misc/README.md:\nFile not found: _/workspaces/nearcore/docs/misc/Cargo.toml_ .\n_./runtime/runtime-params-estimator/README.md_:\nFile not found: _/workspaces/nearcore/runtime/runtime-params-estimator/continuous-estimation/README.md_ .\n_./runtime/near-vm/api/README.md_:\n404 Error: Wasmer Dylib.\n404 Error: Wasmer Staticlib.\n404 Error: Wasmer Universal.\n_./runtime/near-vm/engine-universal/README.md_:\n404 Error: Wasmer Example Engine Universal.\n_./runtime/near-vm/engine/README.md_:\n404 Error: Various Wasmer URLs; please verify each link.\n_./chain/rosetta-rpc/README.md_ :\n404 Error: Contribute to Nearcore.\nConnection refused: http://localhost:3040/api/spec.\n./chain/jsonrpc/res/debug.html:\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/pages/sync_ .\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/pages/network_info_ .\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/pages/last_blocks_ .\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/pages/validator_ .\nFile not found:\n_/workspaces/nearcore/chain/jsonrpc/res/debug/pages/chain_n_chunk_info_ .\nFile not found:\n_/workspaces/nearcore/chain/jsonrpc/res/debug/pages/tier1_network_info_ .\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/pages/epoch_info_ .\nFile not found: _/workspaces/nearcore/chain/jsonrpc/res/debug/client_config_ .\n_./chain/epoch-manager/README.md_ :\n404 Error: Validator Rewards Calculation\n_./chain/chunks/README.md_:\n404 Error: Near Nightshade.\n_./tools/debug-ui/README.md_:\nConnection refused: http://localhost:3000/logviz.\n_./tools/state-viewer/README.md_ :\n404 Error: Near Ops Pull Request.\n_./pytest/tests/mocknet/README.md_ :\n404 Error: Near Ops Repository.\n_./venv/lib/python3.11/site-packages/deepdiff-6.5.0.dist-info/AUTHORS.md_ :\n404 Error: Boba-2 GitHub Profile.\n./CONTRIBUTING.md:\nFile not found: _/workspaces/nearcore/docs/protocol_upgrade.md_.\nStatus:\nFixed\nClassification\nSeverity:\nLow\nRecommendations\nRemediation:\nReview & Correct URLs: Each broken URL should be reviewed. Replace those that have moved with their current counterparts, and for those that no longer exist, decisions should be made on whether to remove or replace them.\nUpdate Dead Files & Pages: For pages or files that cannot be found, review whether these need to be reintroduced, updated, or if references to them should be removed from the documentation. Taking these steps will ensure that the project’s documentation remains robust, accurate, and user-friendly, facilitating smoother development and collaboration processes.",
      "description_summary": "Multiple broken URLs in the codebase and documentation need to be reviewed and corrected to maintain accuracy."
    },
    {
      "title": "Inherent risk with use of \"clamp\" function for gas price validation",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "core/primitives/src/block.rs",
          "lines": [374]
        },
        {
          "file_path": "core/chain-configs/src/genesis_validate.rs",
          "lines": [165]
        }
      ],
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Error Handling and Validation",
      "description": "F-2023-1644 - Inherent risk with use of \"clamp\" function for gas price validation - Info\nDescription:\nThe [current](https://github.com/near/nearcore/blob/1.35.0/core/primitives/src/block.rs#L374) implementation for gas price validation relies on the built-in clamp function, which is prone to panicking if the condition for minimum and maximum gas prices fails. While these values are constants as of now, future iterations that allow users to set their own min/max limits could introduce instability and lead to node crashes.\nStatus:\nAccepted\nClassification\nSeverity:\nInfo\nRecommendations\nRemediation:\n1. Validate Genesis Config Values: To prevent future risks, it's advisable to include initial validation for min/max gas prices in the genesis config ([here](https://github.com/near/nearcore/blob/1.35.0/core/chain-configs/src/genesis_validate.rs#L165)). This would catch potential issues before they propagate, enhancing overall network stability.\n2. Replace Clamp with Custom Validation Logic: It is advisable to replace the clamp function with custom validation logic that uses proper error types instead of panicking.\n3. Improve Error Handling: Along with replacing clamp, enriching the error-handling mechanism can contribute to better system resilience and provide more informative feedback to users or administrators when anomalies occur.",
      "description_summary": "The clamp function for gas price validation risks panicking, potentially causing node crashes."
    },
    {
      "title": "NearVM runtime crates have inadequate documentation and TODO annotations",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": "465707751e502250966ab905477395c9093b0eb9",
      "location": [
        {
          "file_path": "runtime/near-vm",
          "lines": null
        }
      ],
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Code Quality",
      "description": "F-2023-1645 - NearVM runtime crates has inadequate documentation and TODO annotations - Info\nDescription:\nThe NearVM runtime crates, which were forked from Wasmer, exhibit a notable lack of proper documentation. It is essential for the community and the developers to understand the modifications made, and the reasons behind them, especially given the nature and importance of blockchain-related projects.\nThe integrity and clarity of the NearVM runtime crates are compromised by two primary issues:\n1. Lack of Documentation on Changes from Wasmer: There's an absence of explicit documentation highlighting the changes made after forking from Wasmer. Such documentation is imperative to understand the evolution, divergence, and unique features or modifications introduced in the NearVM version.\n2. Unexplained TODO Annotations: Numerous TODO annotations are scattered throughout the crates. While some TODOs are generic or benign, others raise significant concern due to their alarming content. A particularly disconcerting comment reads:\n// TODO: What in damnation have you done?! – Bannon\nAnnotations like these suggest that there might be sections of the code that are potentially problematic or deviate significantly from best practices.\nStatus:\nFixed\nClassification\nSeverity:\nInfo\nRecommendations\nRemediation:\n1. Document Changes from Wasmer: Create a comprehensive documentation section that clearly outlines the differences between NearVM's runtime crates and Wasmer's original codebase. This will help developers, auditors, and users understand the reasons behind specific decisions and modifications.\n2. Review and Address TODO Annotations: Conduct a thorough review of all TODO annotations in the crates. Prioritize those with alarming or ambiguous content, like the one cited above, and either address the underlying issues or provide more context to explain the annotations.\n3. Establish a Strong Documentation Practice: To maintain clarity and transparency, implement a robust documentation strategy. Encourage contributors to document significant changes, decisions, and areas of concern. This not only fosters transparency but also aids in future development, debugging, and audits.\nResolution:\nFixed in https://github.com/near/nearcore/pull/10167/commits/465707751e502250966ab905477395c9093b0eb9",
      "description_summary": "The runtime crates lack proper documentation and contain unexplained TODO annotations, indicating potential issues."
    },
    {
      "title": "Rectification of Documentation Inconsistencies",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": null,
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Code Quality",
      "description": "F-2023-1646 - Rectification of Documentation Inconsistencies - Info\nDescription:\nThe project's documentation, code comments, and sample commands exhibit various inconsistencies that could mislead readers or developers working with the project. Addressing these inaccuracies is crucial for maintaining the integrity and clarity of the project's documentation.\nIncorrect URL for Runner Test Results:\nThe documentation for Testing Practices provides an incorrect link to the testing results. It reads:\nExpensive and Python tests are not part of CI and are run by a custom nightly runner. The results of the latest runs are available here.\nHowever, the accurate URL for test results is https://nayduck.near.org/#/.\nNon-Existent Test Target Documentation:\nThe documentation references a non-existent test target, cross_shard_tx. The [Test Hierarchy Section](https://near.github.io/nearcore/practices/testing/index.html#tests-hierarchy) includes a command supposedly related to this target, but no such target exists in the codebase.\ncargo nextest run --package near-client --test cross_shard_tx tests::test_cross_shard_tx --all-features\nMisguiding Python Tests Documentation:\nThe Python test documentation suggests using a plain cargo build command for local test runs. However, this guidance is insufficient as many tests require specific features to run. The documentation fails to specify which features should be paired with which tests, leading to potential confusion and misuse.\nStatus:\nFixed\nClassification\nSeverity:\nInfo\nRecommendations\nRemediation:\n1. Update Runner Test Results URL: Replace the outdated URL in the Testing Practices documentation with the correct NayDuck URL.\n2. Remove or Correct Invalid Test Target Reference: Either remove the cross_shard_tx reference from the Test Hierarchy Section or update the documentation to reference a valid test target.\n3. Provide Clear Guidance for Python Tests: Revise the Python test documentation to include explicit instructions on which features should be used with each test, providing developers with clear and accurate guidance for running tests locally.",
      "description_summary": "Documentation contains incorrect URLs, invalid references, and unclear test instructions."
    },
    {
      "title": "Test Fixtures And Coverage Analysis",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": null,
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Code Quality",
      "description": "F-2023-1647 - Test Fixtures And Coverage Analysis - Info\nDescription:\nThe test coverage was measured for Rust based tests using cargo llvm-cov yielding the following:\nFunction Coverage: 61.56% (11509/18696).\nLine Coverage: 71.75% (96446/134413).\nRegion Coverage: 56.82% (41749/73482).\nA detailed analysis is provided with the report.\nFurthermore, several flaky or misconfigured tests were found:\nFAIL [ 0.203s] integration-tests tests::client::features::chunk_nodes_cache::compare_nod\nFAIL [ 0.187s] near-vm-runner tests::cache::test_wasmer2_artifact_output_stability\nSIGABRT [ 0.429s] near-vm-runner tests::regression_tests::memory_size_alignment_issue\nSIGABRT [ 5.672s] near-vm-runner tests::rs_contract::attach_unspent_gas_but_burn_all_gas\nSIGABRT [ 6.144s] near-vm-runner tests::rs_contract::attach_unspent_gas_but_use_all_gas\nSIGABRT [ 6.081s] near-vm-runner tests::rs_contract::ext_account_balance\nSIGABRT [ 5.254s] near-vm-runner tests::rs_contract::ext_account_id\nSIGABRT [ 5.816s] near-vm-runner tests::rs_contract::ext_attached_deposit\nSIGABRT [ 4.591s] near-vm-runner tests::rs_contract::ext_block_index\nSIGABRT [ 5.373s] near-vm-runner tests::rs_contract::ext_block_timestamp\nSIGABRT [ 4.699s] near-vm-runner tests::rs_contract::ext_predecessor_account_id\nSIGABRT [ 5.225s] near-vm-runner tests::rs_contract::ext_prepaid_gas\nStatus:\nFixed\nClassification\nSeverity:\nInfo\nRecommendations\nRemediation:\n1. Improve Test Score: To enhance the quality and reliability of your software, consider setting a specific target for code coverage (e.g., 80% or higher), and work on creating additional test cases to achieve this goal. Increasing test coverage can help identify and prevent potential issues, leading to a more robust application.\n2. Enable External Test Coverage: To measure coverage for external tests in your Rust project, follow these steps using the cargo llvm-cov tool: configure essential environment variables, remove artifacts that may influence coverage results, build Rust binaries, execute necessary commands, and finally, generate a coverage report in LCOV format. This will provide a comprehensive analysis of your code's test coverage.\n3. Implement llvm-cov Into CI/CD: Incorporating cargo-llvm-cov into your testing process ensures comprehensive coverage analysis, enabling you to assess the effectiveness of your test suite in identifying potential issues and vulnerabilities in your Rust codebase.\n4. Fix Failing Tests: By fixing these issues, you will enhance the overall reliability of your test suite, leading to more accurate and dependable test results. This, in turn, will boost your confidence in the software's stability and facilitate more effective development and quality assurance processes.\nTaking these steps in advance will strengthen the project's security stance and enable more seamless, risk-mitigated development in the future.",
      "description_summary": "Low test coverage and several misconfigured or failing tests impact reliability and stability."
    },
    {
      "title": "Upgrade Wasmtime Dependency and Adjust for API Changes",
      "repository": "https://github.com/near/nearcore",
      "audited_commit": "1e781bcccfaeb9a4bb9531155193a459257afd8d",
      "reported_remediated_commit": null,
      "location": null,
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Dependency",
      "description": "F-2023-1648 - Upgrade Wasmtime Dependency and Adjust for API Changes - Info\nDescription:\nWasmtime Dependency:\nCurrent version: 4.0.0.\nRecommended version: 12.0.1.\nReasoning: Transitioning to version 12.0.1 will bring Near up to date with the most recent optimizations, bug fixes, and potential security enhancements from Wasmtime. However, it's noteworthy that version 12.0.1 introduces API changes (since version 6.0.0) which will necessitate code adjustments.\nStatus:\nFixed\nClassification\nSeverity:\nInfo\nRecommendations\nRemediation:\nUpgrade the Wasmtime dependency from version 4.0.0 to 12.0.1. Given the altered API in version 12.0.1, the codebase should be reviewed and modified accordingly to ensure compatibility. This update will not only keep Near aligned with best development practices but also ensure the platform leverages the latest offerings from Wasmtime.",
      "description_summary": "Wasmtime dependency is outdated and requires an upgrade to version 12.0.1 to address optimizations, bug fixes, and API changes."
    }
  ]
}
