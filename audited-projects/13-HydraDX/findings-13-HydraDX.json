{
  "audited_project_id": 13,
  "project_name": "HydraDX",
  "auditor": "Security Research Labs",
  "audit_link": "https://github.com/polkadot-assurance-legion/pal-docs/blob/main/audits/24h1/hydradx-srl-2405.pdf",
  "findings": [
    {
      "title": "Potential spamming attack via unsigned dispatch_permit extrinsic",
      "repository": "https://github.com/galacticcouncil/HydraDX-node",
      "audited_commit": "e3821e078bdb72a0416f8aebca21ba4a7a599f64",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/transaction-multi-payment/src/lib.rs",
          "lines": null
        }
      ],
      "reported_impact": "Medium",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Denial of Service (DoS) and Spamming",
      "description": "4.1 Potential spamming attack via unsigned dispatch_permit extrinsic\nAttack scenario\nAn attacker spams the network with unsigned transactions.\n\nLocation\npallet-transaction-multi-payment\n\nAttack impact\nSlowing down the chain.\n\nSeverity\nMedium\n\nStatus\nOpen\n\nThe dispatch_permit extrinsic in the HydraDX node allows for unsigned transactions that perform heavy computational validation (e.g.: validate_permit, decode_all_with_depth_limit). This extrinsic is part of the transaction-multi-payment pallet and utilizes the validate_unsigned function to ensure the transaction's validity. The computationally intensive nature of this validation process can be exploited by submitting numerous unsigned extrinsics, potentially leading to a denial-of-service (DoS) attack on the network.\n\nMoreover, the validate_unsigned logic duplicates the same code as the actual extrinsic, dispatch_permit, which adds even more computation time and resources for the entire call.\n\nAs the dispatch_permit is an unsigned extrinsic, there are no fees to be paid, increasing the attack surface.\n\nThe following risks can be attributed to this vulnerability:\n1. Spam vector: An attacker can use a node to submit a large number of unsigned extrinsics, which will be gossiped across the network. This can lead to:\n   - High computational load on collators/validators\n   - Potential denial-of-service (DoS) attack, delaying or dropping legitimate transactions\n   - Network congestion and performance degradation\n\n2. Resource consumption: The heavy computation required for validating unsigned extrinsics can consume significant node resources, impacting overall network stability and performance.\n\nChanging this extrinsic to be an ensure_signed extrinsic will remove the spamming vector by ensuring the payment of the computation from the caller's account.",
      "description_summary": "Unsigned dispatch_permit extrinsic can be exploited for network spam and DoS attacks due to lack of payment requirement.",
      "reported_status": "Open",
      "is_substrate_finding": true
    },
    {
      "title": "The mapping between Ethereum and Substrate addresses could create unwanted behavior",
      "repository": "https://github.com/galacticcouncil/HydraDX-node",
      "audited_commit": "e3821e078bdb72a0416f8aebca21ba4a7a599f64",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/evm-accounts/src/lib.rs",
          "lines": null
        }
      ],
      "reported_impact": "Info",
      "reported_likelihood": null,
      "cwe_classification": null,
      "vulnerability_class_audit": null,
      "vulnerability_class_scout": "Business Logic",
      "description": "4.2 The mapping between Ethereum and Substrate addresses could create unwanted behavior\n\nAttack scenario\nLegitimate user transfers tokens to an EVM address without a bound Substrate account.\n\nLocation\npallet-evm-accounts\n\nAttack impact\nThe user could lose their funds as the destination address cannot be claimed by a Substrate account.\n\nSeverity\nInfo\n\nStatus\nOpen\n\nHydraDX defines three types of addresses:\n1. Truncated address: A substrate address created from an EVM address by prefixing it with \"ETH\\0\" and appending with eight 0 bytes\n2. Full Substrate address: Original 32 bytes long native address (not a truncated address)\n3. EVM address: First 20 bytes of a Substrate address\n\nThis method of mapping EVM addresses to Substrate addresses raises a number of concerns:\n- Taking the raw bytes of an address is against best practices (i.e.: the first 20 bytes of a Substrate address are being used to represent an EVM address)\n- The entropy of truncated addresses is reduced by 12 bytes as the address always begins with \"ETH\\0\" and ends with eight zero bytes\n- Transferring funds to an EVM address which was not bound to a Substrate address results in the funds being transferred to a truncated address, which cannot be claimed by any user\n\nLegitimate users might lose funds by submitting a transfer to an EVM address that is not bound to a Substrate address. This could decrease the trust of the users in the HydraDX network. By reducing the addresses' entropy, the chances of collision attacks increase significantly.\n\nOur mitigation suggestion is to deprecate the usage of truncated addresses and make sure that every EVM address is bound to a Substrate address.",
      "description_summary": "Mapping Ethereum to Substrate addresses can lead to unclaimable funds and reduced address entropy, increasing collision risks.",
      "reported_status": "Open",
      "is_substrate_finding": true
    }
  ]
}
