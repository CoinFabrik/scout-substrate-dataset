{
  "audited_project_id": 1,
  "project_name": "Parallel",
  "auditor": "Trail of Bits",
  "audit_link": "https://github.com/parallel-finance/auditing-report/blob/main/Trail%20of%20Bits_Parallel%20Finance_Final%20Report.pdf",
  "findings": [
    {
      "title": "Vulnerable dependencies in the Substrate parachain",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": null,
      "reported_impact": "Medium",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Patching",
      "description": "1. Vulnerable dependencies in the Substrate parachain\nSeverity: Medium\nDifficulty: High\nType: Patching\nFinding ID: TOB-PLF-1\nTarget: parallel repository\nDescription\nThe Parallel Finance parachain node uses the following dependencies with known vulnerabilities. (All of the dependencies listed are inherited from the Substrate framework.)\nDependencyVersionIDDescription\nchrono 0.4.19 RUSTSEC-2020-0159 Potential segfault in localtime_r invocations\nlru 0.6.6 RUSTSEC-2021-0130 Use after free in lru crate\ntime 0.1.44 RUSTSEC-2020-0071 Potential segfault in the time crate\nnet2 0.2.37 RUSTSEC-2020-0016 net2 crate has been deprecated; use socket2 instead\nOther than chrono, all the dependencies can simply be updated to their newest versions to fix the vulnerabilities. The chrono crate issue has not been mitigated and remains problematic. A specific sequence of calls must occur to trigger the vulnerability, which is discussed in this GitHub thread in the chrono repository.\nExploit Scenario\nAn attacker exploits a known vulnerability in the Parallel Finance node and performs a denial-of-service attack on the network by taking down all nodes in the network.\nRecommendations\nShort term, update all dependencies to their newest versions. Monitor the referenced GitHub thread regarding the chrono crate segfault issue.\nLong term, run cargo-audit as part of the CI/CD pipeline and ensure that the team is alerted to any vulnerable dependencies that are detected.",
      "description_summary": "The Substrate parachain uses dependencies with known vulnerabilities, including chrono, lru, time, and net2, which may lead to potential segfaults or memory issues."
    },
    {
      "title": "Users can avoid accruing interest by repaying a zero amount",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/loans/src/lib.rs",
          "lines": [
            { "from": 1057, "to": 1087 },
            { "from": 1106, "to": 1121 }
          ]
        }
      ],
      "reported_impact": "Medium",
      "reported_likelihood": "Difficulty-Low",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "2. Users can avoid accruing interest by repaying a zero amount\nSeverity: Medium\nDifficulty: Low\nType: Data Validation\nFinding ID: TOB-PLF-2\nTarget: pallets/loans/src/lib.rs\nDescription\nTo repay borrowed funds, users call the repay_borrow extrinsic. The extrinsic implementation calls the Pallet::repay_borrow_internal method to recompute the loan balance. Pallet::repay_borrow_internal updates the loan balance for the account and resets the borrow index as part of the calculation.\nfn repay_borrow_internal(\nborrower: &T::AccountId,\nasset_id: AssetIdOf<T>,\naccount_borrows: BalanceOf<T>,\nrepay_amount: BalanceOf<T>,\n) -> DispatchResult {\n// ... <redacted>\nAccountBorrows::<T>::insert(\nasset_id,\nborrower,\nBorrowSnapshot {\nprincipal: account_borrows_new,\nborrow_index: Self::borrow_index(asset_id),\n},\n);\nTotalBorrows::<T>::insert(asset_id, total_borrows_new);\nOk(())\n}\nFigure 2.1: pallets/loans/src/lib.rs:1057-1087\nThe borrow index is used in the calculation of the accumulated interest for the loan in Pallet::current_balance_from_snapshot. Specifically, the outstanding balance, snapshot.principal, is multiplied by the quotient of borrow_index divided by snapshot.borrow_index.\npub fn current_balance_from_snapshot(\nasset_id: AssetIdOf<T>,\nsnapshot: BorrowSnapshot<BalanceOf<T>>,\n) -> Result<BalanceOf<T>, DispatchError> {\nif snapshot.principal.is_zero() || snapshot.borrow_index.is_zero() {\nreturn Ok(Zero::zero());\n}\n// Calculate new borrow balance using the interest index:\n// recent_borrow_balance = snapshot.principal * borrow_index /\n// snapshot.borrow_index\nlet recent_borrow_balance = Self::borrow_index(asset_id)\n.checked_div(&snapshot.borrow_index)\n.and_then(|r| r.checked_mul_int(snapshot.principal))\n.ok_or(ArithmeticError::Overflow)?;\nOk(recent_borrow_balance)\n}\nFigure 2.2: pallets/loans/src/lib.rs:1106-1121\nTherefore, if the snapshot borrow index is updated to Self::borrow_index(asset_id), the resulting recent_borrow_balance in Pallet::current_balance_from_snapshot will always be equal to snapshot.principal. That is, no interest will be applied to the loan. It follows that the accrued interest is lost whenever part of the loan is repaid. In an extreme case, if the repaid amount passed to repay_borrow is 0, users could reset the borrow index without repaying anything.\nThe same issue is present in the implementations of the liquidated_transfer and borrow extrinsics as well.\nExploit Scenario\nA malicious user borrows assets from Parallel Finance and calls repay_borrow with a repay_amount of zero. This allows her to avoid paying interest on the loan.\nRecommendations\nShort term, modify the code so that the accrued interest is added to the snapshot principal when the snapshot is updated.\nLong term, add unit tests for edge cases (like repaying a zero amount) to increase the chances of discovering unexpected system behavior.",
      "description_summary": "Users can avoid paying interest on loans by repaying a zero amount, resetting the borrow index without repaying anything."
    },
    {
      "title": "Missing validation in Pallet::force_update_market",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/loans/src/lib.rs",
          "lines": [{ "from": 539, "to": 556 }]
        }
      ],
      "reported_impact": "Informational",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "3. Missing validation in Pallet::force_update_market\nSeverity: Informational\nDifficulty: High\nType: Data Validation\nFinding ID: TOB-PLF-3\nTarget: pallets/loans/src/lib.rs\nDescription\nThe Pallet::force_update_market method can be used to replace the stored market instance for a given asset. Other methods used to update market parameters perform extensive validation of the market parameters, but force_update_market checks only the rate model.\npub fn force_update_market(\norigin: OriginFor<T>,\nasset_id: AssetIdOf<T>,\nmarket: Market<BalanceOf<T>>,\n) -> DispatchResultWithPostInfo {\nT::UpdateOrigin::ensure_origin(origin)?;\nensure!(\nmarket.rate_model.check_model(),\nError::<T>::InvalidRateModelParam\n);\nlet updated_market = Self::mutate_market(asset_id, |stored_market| {\n*stored_market = market;\nstored_market.clone()\n})?;\nSelf::deposit_event(Event::<T>::UpdatedMarket(updated_market));\nOk(().into())\n}\nFigure 3.1: pallets/loans/src/lib.rs:539-556\nThis means that the caller (who is either the root account or half of the general council) could inadvertently change immutable market parameters like ptoken_id by mistake.\nExploit Scenario\nThe root account calls force_update_market to update a set of market parameters. By mistake, the ptoken_id market parameter is updated, which means that Pallet::ptoken_id and Pallet::underlying_id are no longer inverses.\nRecommendations\nShort term, consider adding more input validation to the force_update_market extrinsic. In particular, it may make sense to ensure that the ptoken_id market parameter has not changed. Alternatively, add validation to check whether the ptoken_id market parameter is updated and to update the UnderlyingAssetId map to ensure that the value matches the Markets storage map.",
      "description_summary": "The force_update_market method lacks sufficient validation, potentially allowing unintended changes to immutable market parameters."
    },
    {
      "title": "Missing validation in multiple StakingLedger methods",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/liquid-staking/src/types.rs",
          "lines": [
            { "from": 199, "to": 219 },
            { "from": 223, "to": 226 },
            { "from": 230, "to": 253 }
          ]
        }
      ],
      "reported_impact": "Undetermined",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "4. Missing validation in multiple StakingLedger methods\nSeverity: Undetermined\nDifficulty: High\nType: Data Validation\nFinding ID: TOB-PLF-4\nTarget: pallets/liquid-staking/src/types.rs\nDescription\nThe staking ledger is used to keep track of the total amount of staked funds in the system. It is updated in response to cross-consensus messaging (XCM) requests to the parent chain (either Polkadot or Kusama). A number of the StakingLedger methods lack sufficient input validation before they update the staking ledgerâ€™s internal state. Even though the input is validated as part of the original XCM call, there could still be issues due to implementation errors or overlooked corner cases.\nFirst, the StakingLedger::rebond method does not use checked arithmetic to update the active balance. The method should also check that the computed unlocking_balance is equal to the input value at the end of the loop to ensure that the system remains consistent.\npub fn rebond(&mut self, value: Balance) {\nlet mut unlocking_balance: Balance = Zero::zero();\nwhile let Some(last) = self.unlocking.last_mut() {\nif unlocking_balance + last.value <= value {\nunlocking_balance += last.value;\nself.active += last.value;\nself.unlocking.pop();\n} else {\nlet diff = value - unlocking_balance;\nunlocking_balance += diff;\nself.active += diff;\nlast.value -= diff;\n}\nif unlocking_balance >= value {\nbreak;\n}\n}\n}\nFigure 4.1: pallets/liquid-staking/src/types.rs:199-219\nSecond, the StakingLedger::bond_extra method does not use checked arithmetic to update the total and active balances.\npub fn bond_extra(&mut self, value: Balance) {\nself.total += value;\nself.active += value;\n}\nFigure 4.2: pallets/liquid-staking/src/types.rs:223-226\nFinally, the StakingLedger::unbond method does not use checked arithmetic when updating the active balance.\npub fn unbond(&mut self, value: Balance, target_era: EraIndex) {\nif let Some(mut chunk) = self\n.unlocking\n.last_mut()\n.filter(|chunk| chunk.era == target_era)\n{\nchunk.value = chunk.value.saturating_add(value);\n} else {\nself.unlocking.push(UnlockChunk {\nvalue,\nera: target_era,\n});\n};\nself.active -= value;\n}\nFigure 4.3: pallets/liquid-staking/src/types.rs:230-253\nSince the staking ledger is updated by a number of the XCM response handlers, and XCM responses may return out of order, it is important to ensure that input to the staking ledger methods is validated to prevent issues due to race conditions and corner cases.\nWe could not find a way to exploit this issue, but we cannot rule out the risk that it could be used to cause a denial-of-service condition in the system.\nExploit Scenario\nThe staking ledger's state is updated as part of a WithdrawUnbonded request, leaving the unlocking vector in the staking ledger empty. Later, when the response to a previous call to rebond is handled, the ledger is updated again, which leaves it in an inconsistent state.\nRecommendations\nShort term, ensure that the balance represented by the staking ledgerâ€™s unlocking vector is enough to cover the input balance passed to StakingLedger::rebond. Use checked arithmetic in all staking ledger methods that update the ledgerâ€™s internal state to ensure that issues due to data races are detected and handled correctly.",
      "description_summary": "StakingLedger methods lack sufficient input validation and unchecked arithmetic, potentially leading to inconsistent states or race conditions."
    },
    {
      "title": "Failed XCM requests left in storage",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/liquid-staking/src/lib.rs",
          "lines": [{ "from": 1071, "to": 1159 }]
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "5. Failed XCM requests left in storage\nSeverity: Low\nDifficulty: High\nType: Data Validation\nFinding ID: TOB-PLF-5\nTarget: pallets/liquid-staking/src/lib.rs\nDescription\nWhen the liquid-staking pallet generates an XCM request for the parent chain, the corresponding XCM response triggers a call to Pallet::notification_received. If the response is of the Response::ExecutionResult type, this method calls Pallet::do_notification_received to handle the result.\nThe Pallet::do_notification_received method checks whether the request was successful and then updates the local state according to the corresponding XCM request, which is obtained from the XcmRequests storage map.\nfn do_notification_received(\nquery_id: QueryId,\nrequest: XcmRequest<T>,\nres: Option<(u32, XcmError)>,\n) -> DispatchResult {\nuse ArithmeticKind::*;\nuse XcmRequest::*;\nlet executed = res.is_none();\nif !executed {\nreturn Ok(());\n}\nmatch request {\nBond {\nindex: derivative_index,\namount,\n} => {\nensure!(\n!StakingLedgers::<T>::contains_key(&derivative_index),\nError::<T>::AlreadyBonded\n);\nlet staking_ledger =\n<StakingLedger<T::AccountId, BalanceOf<T>>>::new(\nSelf::derivative_sovereign_account_id(derivative_index),\namount,\n);\nStakingLedgers::<T>::insert(derivative_index, staking_ledger);\nMatchingPool::<T>::try_mutate(|p| -> DispatchResult {\np.update_total_stake_amount(amount, Subtraction)\n})?;\nT::Assets::burn_from(\nSelf::staking_currency()?,\n&Self::account_id(),\nAmount\n)?;\n}\n// ... <redacted>\n}\nXcmRequests::<T>::remove(&query_id);\nOk(())\n}\nFigure 5.1: pallets/liquid-staking/src/lib.rs:1071-1159\nIf the method completes without errors, the XCM request is removed from storage via a call to XcmRequests<T>::remove(query_id). However, if any of the following conditions are true, the corresponding XCM request is left in storage indefinitely:\n1. The request fails and Pallet::do_notification_received exits early.\n2. Pallet::do_notification_received fails.\n3. The response type is not Response::ExecutionResult.\nThese three cases are currently unhandled by the codebase. The same issue is present in the crowdloans pallet implementation of Pallet::do_notification_received.\nRecommendations\nShort term, ensure that failed XCM requests are handled correctly by the crowdloans and liquid-staking pallets.",
      "description_summary": "Failed XCM requests are left in storage indefinitely if not handled properly by the notification_received method."
    },
    {
      "title": "Risk of using stale oracle prices in loans pallet",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/loans/src/lib.rs",
          "lines": [{ "from": 1430, "to": 1441 }]
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "6. Risk of using stale oracle prices in loans pallet\nSeverity: Low\nDifficulty: High\nType: Data Validation\nFinding ID: TOB-PLF-6\nTarget: pallets/loans/src/lib.rs\nDescription\nThe loans pallet uses oracle prices to find a USD value of assets using the get_price function. The get_price function internally uses the T::PriceFeeder::get_price function, which returns a timestamp and the price. However, the returned timestamp is ignored.\npub fn get_price(asset_id: AssetIdOf<T>) -> Result<Price, DispatchError> {\nlet (price, _) = T::PriceFeeder::get_price(&asset_id).ok_or(Error::<T>::PriceOracleNotReady)?;\nif price.is_zero() {\nreturn Err(Error::<T>::PriceIsZero.into());\n}\nlog::trace!(target: \"loans::get_price\", \"price: {:?}\", price.into_inner());\nOk(price)\n}\nFigure 6.1: pallets/loans/src/lib.rs:1430-1441\nExploit Scenario\nThe price feeding oracles fail to deliver prices for an extended period of time. The get_price function returns stale prices, causing the get_asset_value function to return a non-market asset value.\nRecommendations\nShort term, modify the code so that it compares the returned timestamp from the T::PriceFeeder::get_price function with the current timestamp, returns an error if the price is too old, and handles the emergency price, which currently has a timestamp of zero. This will stop the market if stale prices are returned and allow the governance process to intervene with an emergency price.",
      "description_summary": "The loans pallet may use stale oracle prices, leading to incorrect asset valuations."
    },
    {
      "title": "Missing calculations in crowdloans extrinsics",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/crowdloans/src/lib.rs",
          "lines": [{ "from": 718, "to": 765 }]
        }
      ],
      "reported_impact": "Undetermined",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Undefined Behavior",
      "description": "7. Missing calculations in crowdloans extrinsics\nSeverity: Undetermined\nDifficulty: High\nType: Undefined Behavior\nFinding ID: TOB-PLF-7\nTarget: pallets/crowdloans/src/lib.rs\nDescription\nThe claim extrinsic in the crowdloans pallet is missing code to subtract the claimed amount from vault.contributed to update the total contribution amount. A similar bug exists in the refund extrinsic: there is no subtraction from vault.contributed after the Self::contribution_kill call.\npub fn claim(\norigin: OriginFor<T>,\ncrowdloan: ParaId,\nlease_start: LeasePeriod,\nlease_end: LeasePeriod,\n) -> DispatchResult {\n// ... <redacted>\nSelf::contribution_kill(\nvault.trie_index,\n&who,\nChildStorageKind::Contributed\n);\nSelf::deposit_event(Event::<T>::VaultClaimed(\ncrowdloan,\n(lease_start, lease_end),\nctoken,\nwho,\namount,\nVaultPhase::Succeeded,\n));\nOk(())\n}\nFigure 7.1: pallets/crowdloans/src/lib.rs:718-765\nExploit Scenario\nThe claim extrinsic is called, but the total amount in vault.contributed is not updated, leading to incorrect calculations in other places.\nRecommendations\nShort term, update the claim and refund extrinsics so that they subtract the amount from vault.contributed.\nLong term, add a test suite to ensure that the vault state stays consistent after the claim and refund extrinsics are called.",
      "description_summary": "The claim and refund extrinsics do not update the vault's total contribution, leading to incorrect calculations."
    },
    {
      "title": "Event emitted when update_vault and set_vrf calls do not make updates",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/crowdloans/src/lib.rs",
          "lines": [
            { "from": 424, "to": 472 },
            { "from": 599, "to": 616 }
          ]
        }
      ],
      "reported_impact": "Informational",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Auditing and Logging",
      "description": "8. Event emitted when update_vault and set_vrf calls do not make updates\nSeverity: Informational\nDifficulty: High\nType: Auditing and Logging\nFinding ID: TOB-PLF-8\nTarget: pallets/crowdloans/src/lib.rs\nDescription\nThe update_vault extrinsic in the crowdloans pallet is responsible for updating the three values shown. It is possible to call update_vault in such a way that no update is performed, but the function emits an event regardless of whether an update occurred. The same situation occurs in the set_vrfs extrinsic.\npub fn update_vault(\norigin: OriginFor<T>,\ncrowdloan: ParaId,\ncap: Option<BalanceOf<T>>,\nend_block: Option<BlockNumberFor<T>>,\ncontribution_strategy: Option<ContributionStrategy>,\n) -> DispatchResult {\nT::UpdateVaultOrigin::ensure_origin(origin)?;\nlet mut vault = Self::current_vault(crowdloan).ok_or(Error::<T>::VaultDoesNotExist)?;\nif let Some(cap) = cap {\n// ... <redacted>\n}\nif let Some(end_block) = end_block {\n// ... <redacted>\n}\nif let Some(contribution_strategy) = contribution_strategy {\n// ... <redacted>\n}\nSelf::deposit_event(Event::<T>::VaultUpdated(crowdloan,(lease_start, lease_end),contribution_strategy,cap,end_block));\nOk(())\n}\nFigure 8.1: pallets/crowdloans/src/lib.rs:424-472\npub fn set_vrfs(origin: OriginFor<T>, vrfs: Vec<ParaId>) -> DispatchResult {\nT::VrfOrigin::ensure_origin(origin)?;\nlog::trace!(target: \"crowdloans::set_vrfs\", \"pre-toggle. vrfs: {:?}\",vrfs);\nVrfs::<T>::try_mutate(|b| -> Result<(), DispatchError> {\n*b = vrfs.try_into().map_err(|_| Error::<T>::MaxVrfsExceeded)?;\nOk(())\n})?;\nSelf::deposit_event(Event::<T>::VrfsUpdated(Self::vrfs()));\nOk(())\n}\nFigure 8.2: pallets/crowdloans/src/lib.rs:599-616\nExploit Scenario\nA system observes that the VaultUpdate event was emitted even though the vault state did not actually change. Based on this observation, it performs logic that should be executed only when the state has been updated.\nRecommendations\nShort term, modify the VaultUpdate event so that it is emitted only when the update_vault extrinsic makes an actual update. Optionally, have the update_vault extrinsic return an error to the caller when calling it results in no updates.",
      "description_summary": "The update_vault and set_vrfs extrinsics emit events even when no actual updates are made."
    },
    {
      "title": "The referral code is a sequence of arbitrary bytes",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/crowdloans/src/lib.rs",
          "lines": [{ "from": 502, "to": 594 }]
        }
      ],
      "reported_impact": "Informational",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "9. The referral code is a sequence of arbitrary bytes\nSeverity: Informational\nDifficulty: High\nType: Data Validation\nFinding ID: TOB-PLF-9\nTarget: pallets/crowdloans/src/lib.rs\nDescription\nThe referral code is used in a number of extrinsic calls in the crowdloans pallet. Because the referral code is never validated, it can be a sequence of arbitrary bytes. The referral code is logged by a number of extrinsics. However, it is currently impossible to perform log injection because the referral code is printed as a hexadecimal string rather than raw bytes (using the debug representation).\npub fn contribute(\norigin: OriginFor<T>,\ncrowdloan: ParaId,\n#[pallet::compact] amount: BalanceOf<T>,\nreferral_code: Vec<u8>,\n) -> DispatchResultWithPostInfo {\n// ... <redacted>\nlog::trace!(\ntarget: \"crowdloans::contribute\",\n\"who: {:?}, para_id: {:?}, amount: {:?}, referral_code: {:?}\",\n&who,\n&crowdloan,\n&amount,\n&referral_code\n);\nOk(().into())\n}\nFigure 9.1: pallets/crowdloans/src/lib.rs:502-594\nExploit Scenario\nThe referral code is rendered as raw bytes in a vulnerable environment, introducing an opportunity to perform a log injection attack.\nRecommendations\nShort term, choose and implement a data type that models the referral code semantics as closely as possible.",
      "description_summary": "The referral code in the crowdloans pallet is arbitrary and unvalidated, potentially allowing log injection attacks."
    },
    {
      "title": "Missing validation of referral code size",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/crowdloans/src/lib.rs",
          "lines": [{ "from": 1429, "to": 1464 }]
        }
      ],
      "reported_impact": "Low",
      "reported_likelihood": "Difficulty-Low",
      "cwe_classification": null,
      "vulnerability_class_audit": "Data Validation",
      "description": "10. Missing validation of referral code size\nSeverity: Low\nDifficulty: Low\nType: Data Validation\nFinding ID: TOB-PLF-10\nTarget: pallets/crowdloans/src/lib.rs\nDescription\nThe length of the referral code is not validated by the contribute extrinsic defined by the crowdloans pallet. Since the referral code is stored by the node, a malicious user could call contribute multiple times with a very large referral code. This would increase the memory pressure on the node, potentially leading to memory exhaustion.\nfn do_contribute(\nwho: &AccountIdOf<T>,\ncrowdloan: ParaId,\nvault_id: VaultId,\namount: BalanceOf<T>,\nreferral_code: Vec<u8>,\n) -> Result<(), DispatchError> {\nXcmRequests::<T>::insert(\nquery_id,\nXcmRequest::Contribute {\ncrowdloan,\nvault_id,\nwho: who.clone(),\namount,\nreferral_code: referral_code.clone(),\n},\n);\nOk(())\n}\nFigure 10.1: pallets/crowdloans/src/lib.rs:1429-1464\nExploit Scenario\nA malicious user calls the contribute extrinsic multiple times with a very large referral code. This increases the memory pressure on the validator nodes and eventually causes all parachain nodes to run out of memory and crash.\nRecommendations\nShort term, add validation that limits the size of the referral code argument to the contribute extrinsic.",
      "description_summary": "The contribute extrinsic lacks validation on the referral code size, potentially leading to memory exhaustion."
    },
    {
      "title": "Code duplication in crowdloans pallet",
      "repository": "https://github.com/parallel-finance/parallel",
      "audited_commit": "5ca8e13b7b4312855ae2ef1d39f14b38088dfdbd",
      "reported_remediated_commit": null,
      "location": [
        {
          "file_path": "pallets/crowdloans/src/lib.rs",
          "lines": null
        }
      ],
      "reported_impact": "Informational",
      "reported_likelihood": "Difficulty-High",
      "cwe_classification": null,
      "vulnerability_class_audit": "Patching",
      "description": "11. Code duplication in crowdloans pallet\nSeverity: Informational\nDifficulty: High\nType: Patching\nFinding ID: TOB-PLF-11\nTarget: pallets/crowdloans/src/lib.rs\nDescription\nA number of extrinsics in the crowdloans pallet have duplicate code. The close, reopen, and auction_succeeded extrinsics have virtually identical logic. The migrate_pending and refund extrinsics are also fairly similar.\nExploit Scenario\nA vulnerability is found in the duplicate code, but it is patched in only one place.\nRecommendations\nShort term, refactor the close, reopen, and auction_succeeded extrinsics into one function, to be called with values specific to the extrinsics. Refactor common pieces of logic in the migrate_pending and refund extrinsics.\nLong term, avoid code duplication, as it makes the system harder to review and update. Perform regular code reviews and track any logic that is duplicated.",
      "description_summary": "Code duplication in the crowdloans pallet increases the risk of inconsistent patches and complicates maintenance."
    }
  ]
}
